@import "~codemirror/lib/codemirror.css";
@import "~codemirror/theme/idea.css";

$font-family-mono: 'Liberation Mono', Consolas, Menlo, Courier, monospace !global;

.executable-fragment-wrapper {
  margin-bottom: 20px;
  position: relative;
}

.executable-fragment {
  border: 1px solid #eee;
}

.CodeMirror {
  height: auto;

  pre {
    font-size: 12px !important;
    line-height: 16.8px !important;
    margin-bottom: 0 !important;
  }
}

.CodeMirror-lines {
  padding: 0;
  margin: 12px 0;
  background: white;
}

.CodeMirror-scroll {
  height: auto;
}

.CodeMirror-gutter {
  height: auto;
}

.CodeMirror {
  line-height: 1.4;
  font-family: menlo, consolas, monospace;
  font-size: 12px;
}

.CodeMirror-linenumber {
  min-width: 0;
  text-align: center;
}

.command-panel {
  background-color: #f7f7f7;
  padding: 5px 30px;
}

.CodeMirror-linebackground.unmodifiable-line {
  background-color: #f7f7f7;
}

.taskWindow {
  border-top: 1px solid #0000FF;
  border-bottom: 1px solid #0000FF;
}

.taskWindow-start {
  border-left: 1px solid #0000FF;
}

.taskWindow-end {
  border-right: 1px solid #0000FF;
}
.run-button {
  position: absolute;
  z-index: 10;
  right: 5px;
  top: 5px;
  height: 20px;
  width: 16px;
  cursor: pointer;
  background: url("img/run.svg");
  background-size: cover;
  background-repeat: no-repeat;

  &._disabled {
    cursor: default;
    opacity: 0.5;
  }
}

.loader-icon {
  background: url("img/loader.svg");
  background-size: cover;
  background-repeat: no-repeat;
  height: 30px;
  width: 60px;
  margin: 20px;
}

.cm__ERROR {
  color: #ff0000 !important;
}

.errors-and-warnings-gutter {
  width: 16px;
}

.ERRORgutter {
  height: 13px;
  width: 13px;
  margin-top: 2px;
  margin-left: 2px;
  background: url("http://try.kotlinlang.org/static/images/icons_all_sprite.png") no-repeat -150px -500px;
}

.WARNINGgutter {
  height: 13px;
  width: 13px;
  margin-top: 2px;
  margin-left: 2px;
  background: url("http://try.kotlinlang.org/static/images/icons_all_sprite.png") no-repeat -150px -600px;
}

@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .ERRORgutter {
    background-image: url("http://try.kotlinlang.org/static/images/icons_all_sprite@2x.png");
    background-size: 250px 900px;
  }

  .WARNINGgutter {
    background-image: url("http://try.kotlinlang.org/static/images/icons_all_sprite@2x.png");
    background-size: 250px 900px;
  }
}

.cm__red_wavy_line {
  background: url(http://try.kotlinlang.org/static/images/wavyline-red.gif) repeat-x 100% 100% !important;
  padding-bottom: 2px;
}

.cm__green_wavy_line {
  background: url(http://try.kotlinlang.org/static/images/wavyline-green.gif) repeat-x 100% 100% !important;
  padding-bottom: 2px;
}

.output-wrapper {
  border-top: 1px solid #eee;
  min-height: 50px;
}

.code-output {
  font-family: $font-family-mono;
  overflow: auto;
  padding-left: 10px;
  padding-top: 15px;
}

.error-output {
  white-space: pre;
  color: #ff0000;
  min-height: 1.4em;
  margin: 0;
  vertical-align: top;
}

.standard-output {
  white-space: pre;
  color: #000;
  min-height: 1.4em;
  margin: 0;
  vertical-align: top;
}

.test-output {
  white-space: pre;
  color: #4ca01f;
  min-height: 1.4em;
  vertical-align: top;
  margin-left: 20px;
}

.test-fail {
  color: #ff0000;
  min-height: 1.4em;
  margin-left: 20px;
  vertical-align: top;
}

.test-icon {
  margin-top: 3px;
  width: 15px;
  height: 15px;
  position: absolute;
}

.test-icon.ok {
  background-image: url('img/ok.svg')
}

.test-icon.fail {
  background-image: url('img/fail.svg')
}

.stacktrace-element {
  margin-left: 20px;
}

.CodeMirror-foldgutter {
  position: absolute;
  width: 100%;
}

.CodeMirror-foldgutter-folded {
  width: 100%;
  background: white;
}

.fold-button {
  position: absolute;
  height: 19px;
  width: 31px;
  top: 0;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
  cursor: pointer;
  background: url('img/button_open.svg?fill=%23d4d4d4&selector=.data-fill') no-repeat;
  background-color: transparent;
  &._hover {
    background-image: url('img/button_open.svg?fill=%23f68322&selector=.data-fill');
  }
}

._unfolded {
  .fold-button {
    background-image: url('img/button_close.svg?fill=%23d4d4d4&selector=.data-fill');
  }

  .fold-button._hover {
    background-image: url('img/button_close.svg?fill=%23f68322&selector=.data-fill');
  }
}

.zigzag {
  position: absolute;
  left: 50%;
  z-index: 9;
  background-size: auto 100%;
  background-repeat: repeat-x;
  width: 180px;
  height: 5px;

  &._top {
    background-image: url('img/zigzag_top.svg?fill=%23eee&selector=.data-fill');
    top: 0;
    transform: translate(-50%, -50%);

    &._hover {
      background-image: url('img/zigzag_top.svg?fill=%23f68322&selector=.data-fill');
    }
  }

  &._bottom {
    background-image: url('img/zigzag_bottom.svg?fill=%23eee&selector=.data-fill');
    bottom: 0;
    transform: translate(-50%, 50%);
    &._hover {
      background-image: url('img/zigzag_bottom.svg?fill=%23f68322&selector=.data-fill');
    }
  }

}

.code-area {
  position: relative;
}

.compiler-info {
  position: absolute;
  right: 0;
  font-size: 10px;
  color: #949494;

  span {
    margin-left: 15px;
  }
}

.executable-fragment-wrapper {
}

.CodeMirror-hints {
  padding-left: 0 !important;
  border: 1px solid #969696;
  border-radius: 4px;
  position: absolute;
  background-color: #f7f7f7;
  overflow-y: hidden;
  z-index: 10;
  max-height: 20em;
  box-shadow: 2px 3px 5px rgba(0, 0, 0, .2);
}

.CodeMirror-hint {
  white-space: pre;
  cursor: pointer;
  border-radius: 0;
  margin: 0;
  padding: 0 4px 0 0;
  line-height: 18px;
}

li.CodeMirror-hint-active {
  background-color: #d8d8d8;
  color: #000000;
}

.CodeMirror-hint .name {
  float: left;
}

.CodeMirror-hint .tail {
  float: right;
  padding-left: 20px;
  margin-right: 5px;
}

.CodeMirror-hint .icon {
  margin-top: 1px;
  margin-left: 2px;
  height: 16px;
  width: 16px;
  float: left;
  margin-right: 10px;
}

.icon {
  background: url("http://try.kotlinlang.org/static/images/icons_all_sprite.svg");
}

.icon.class {
  background: url("http://try.kotlinlang.org/static/images/completion_class.svg");
}

.icon.package {
  background: url("http://try.kotlinlang.org/static/images/completion_package.svg");
}

.icon.method {
  background: url("http://try.kotlinlang.org/static/images/completion_method.svg");
}

.icon.genericValue {
  background: url("http://try.kotlinlang.org/static/images/completion_generic.svg")
}

.icon.property {
  background: url("http://try.kotlinlang.org/static/images/completion_property.svg");
}
